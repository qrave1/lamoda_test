// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// GetInventoryParams defines parameters for GetInventory.
type GetInventoryParams struct {
	// WarehouseId Идентификатор склада
	WarehouseId int `form:"warehouse_id" json:"warehouse_id"`
}

// PostReleaseJSONBody defines parameters for PostRelease.
type PostReleaseJSONBody struct {
	ProductCodes []int `json:"product_codes"`
	WarehouseId  int   `json:"warehouse_id"`
}

// PostReserveJSONBody defines parameters for PostReserve.
type PostReserveJSONBody struct {
	ProductCodes []int `json:"product_codes"`
	Quantity     int   `json:"quantity"`
	WarehouseId  int   `json:"warehouse_id"`
}

// PostReleaseJSONRequestBody defines body for PostRelease for application/json ContentType.
type PostReleaseJSONRequestBody PostReleaseJSONBody

// PostReserveJSONRequestBody defines body for PostReserve for application/json ContentType.
type PostReserveJSONRequestBody PostReserveJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получение количества оставшихся товаров на складе
	// (GET /inventory)
	GetInventory(c *fiber.Ctx, params GetInventoryParams) error
	// Освобождение резерва товаров
	// (POST /release)
	PostRelease(c *fiber.Ctx) error
	// Резервирование товара на складе для доставки
	// (POST /reserve)
	PostReserve(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetInventory operation middleware
func (siw *ServerInterfaceWrapper) GetInventory(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInventoryParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "warehouse_id" -------------

	if paramValue := c.Query("warehouse_id"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument warehouse_id is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "warehouse_id", query, &params.WarehouseId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter warehouse_id: %w", err).Error())
	}

	return siw.Handler.GetInventory(c, params)
}

// PostRelease operation middleware
func (siw *ServerInterfaceWrapper) PostRelease(c *fiber.Ctx) error {

	return siw.Handler.PostRelease(c)
}

// PostReserve operation middleware
func (siw *ServerInterfaceWrapper) PostReserve(c *fiber.Ctx) error {

	return siw.Handler.PostReserve(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/inventory", wrapper.GetInventory)

	router.Post(options.BaseURL+"/release", wrapper.PostRelease)

	router.Post(options.BaseURL+"/reserve", wrapper.PostReserve)

}

type GetInventoryRequestObject struct {
	Params GetInventoryParams
}

type GetInventoryResponseObject interface {
	VisitGetInventoryResponse(ctx *fiber.Ctx) error
}

type GetInventory200JSONResponse int

func (response GetInventory200JSONResponse) VisitGetInventoryResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetInventory400JSONResponse struct {
	Error string `json:"error"`
}

func (response GetInventory400JSONResponse) VisitGetInventoryResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetInventory404Response struct {
}

func (response GetInventory404Response) VisitGetInventoryResponse(ctx *fiber.Ctx) error {
	ctx.Status(404)
	return nil
}

type GetInventory500Response struct {
}

func (response GetInventory500Response) VisitGetInventoryResponse(ctx *fiber.Ctx) error {
	ctx.Status(500)
	return nil
}

type PostReleaseRequestObject struct {
	Body *PostReleaseJSONRequestBody
}

type PostReleaseResponseObject interface {
	VisitPostReleaseResponse(ctx *fiber.Ctx) error
}

type PostRelease200JSONResponse struct {
	Message string `json:"message"`
}

func (response PostRelease200JSONResponse) VisitPostReleaseResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostRelease400JSONResponse struct {
	Error string `json:"error"`
}

func (response PostRelease400JSONResponse) VisitPostReleaseResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostRelease404Response struct {
}

func (response PostRelease404Response) VisitPostReleaseResponse(ctx *fiber.Ctx) error {
	ctx.Status(404)
	return nil
}

type PostRelease500Response struct {
}

func (response PostRelease500Response) VisitPostReleaseResponse(ctx *fiber.Ctx) error {
	ctx.Status(500)
	return nil
}

type PostReserveRequestObject struct {
	Body *PostReserveJSONRequestBody
}

type PostReserveResponseObject interface {
	VisitPostReserveResponse(ctx *fiber.Ctx) error
}

type PostReserve200JSONResponse struct {
	Message string `json:"message"`
}

func (response PostReserve200JSONResponse) VisitPostReserveResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostReserve400JSONResponse struct {
	Error string `json:"error"`
}

func (response PostReserve400JSONResponse) VisitPostReserveResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostReserve404Response struct {
}

func (response PostReserve404Response) VisitPostReserveResponse(ctx *fiber.Ctx) error {
	ctx.Status(404)
	return nil
}

type PostReserve500Response struct {
}

func (response PostReserve500Response) VisitPostReserveResponse(ctx *fiber.Ctx) error {
	ctx.Status(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Получение количества оставшихся товаров на складе
	// (GET /inventory)
	GetInventory(ctx context.Context, request GetInventoryRequestObject) (GetInventoryResponseObject, error)
	// Освобождение резерва товаров
	// (POST /release)
	PostRelease(ctx context.Context, request PostReleaseRequestObject) (PostReleaseResponseObject, error)
	// Резервирование товара на складе для доставки
	// (POST /reserve)
	PostReserve(ctx context.Context, request PostReserveRequestObject) (PostReserveResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetInventory operation middleware
func (sh *strictHandler) GetInventory(ctx *fiber.Ctx, params GetInventoryParams) error {
	var request GetInventoryRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetInventory(ctx.UserContext(), request.(GetInventoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetInventory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetInventoryResponseObject); ok {
		if err := validResponse.VisitGetInventoryResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostRelease operation middleware
func (sh *strictHandler) PostRelease(ctx *fiber.Ctx) error {
	var request PostReleaseRequestObject

	var body PostReleaseJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostRelease(ctx.UserContext(), request.(PostReleaseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRelease")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostReleaseResponseObject); ok {
		if err := validResponse.VisitPostReleaseResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostReserve operation middleware
func (sh *strictHandler) PostReserve(ctx *fiber.Ctx) error {
	var request PostReserveRequestObject

	var body PostReserveJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostReserve(ctx.UserContext(), request.(PostReserveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostReserve")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostReserveResponseObject); ok {
		if err := validResponse.VisitPostReserveResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXT2vjRhT/KsOcxdpJd2HRbUuh+FJCLz2EsKjSSzyLpVFmRmlNMNhOS7fkEOipl6YL",
	"/QJaEzdqUitf4c03Km9keyXL3aQsu3TZS0RmHu/P7/1+P0unXCSHkvunPAIdKpEaIRPu82d7PYZXeGsv",
	"mB1jjq+xtFN7zuyE2SmWOMPcnf+NBcMF5sxO8AZvMccrnHOPG2EGwH3+TaCgLzMN7Nlej3v8BJSuKuw8",
	"6j7q8pHHZQpJkAru88/ckcfTwPQ19dQRyQkkRqoh/XcEpt0o/oIlXuOMurE/Y45zO2V4gyXeYmF/wrmd",
	"2CnOsKz3XeLMY1i6qxxn9iUW9kc7sRdbZ5EpqIDK9SLu8y/B9NZdUa8qiMGA0tzfbzX3K6XAhZ1iYX/A",
	"Am8wpzbsuF4j5x4XFH6cgcuZBDFh990Ku+ci4h5XcJwJBRH3jcrA4zrsQxwQImaYUrxIDByB4qPRAUXr",
	"VCYaHI673S49QpkYSByIQZoOROim6rzQ1OxpLSF8H8Qp7W/3idfOPvI2x/zDTvAO5/YlLrDEOcM7wt+e",
	"Ef64wIKO2ivJN1ZCZHj8HztNFW3HiGpOUEqqxgA1Ava+YEKzNYrrwbRRIjniNNYbiPeXuQ7WYfLbFxCa",
	"reNfEoHwNW2X4YzhNeZ4RzPZCc6rqR5vYe5vBMsCc/yrYgmWFPukQqDF8oU9s1M7doELe0FcLWt1qZQd",
	"48z9zd00OovjgKTD8feH7WOrJJpL2qIQqtVRMIBAg9uJ1NuEemknpEOyEvyTaO+kas+ofQcZzXWO81pB",
	"e86wwGvmxr5eDpi3JLkntfl6Wb9aImjzuYyG70ClVMkoC83zUEZLbq0otc/pbId77rlLFBEGYhcUi0TE",
	"Wcz9bls3Ht32qsid9XWgVDCky4ba6/V2vLem3aBts++NtNvZ3DSW0Tt6RxPGGLQOjqCpyb2qRxKjW1rE",
	"dBaGoPVhNhgM71XmKueDtNmypnKDhitBbNJ8C+/ehz99JZkCDeoEIpaucDFyBc2nZVOX/7abxh5aPxuV",
	"/zgQ3+I/r2o5Cju2Zw/zn3tfCCr3qap/tO5znAWJEWZ4f5oP4VO1fv5/lrUU64ezrAb7i4r0jq5t23ov",
	"FtVLdHZ4KEIBiVl5FFsv6JMyqFcP20Teto3V1xRevXnJwhssKiAcp5afEJkacJ/3jUn9Tmcgw2DQl9r4",
	"T7tPu3x0MPonAAD//6IWWQeyDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
